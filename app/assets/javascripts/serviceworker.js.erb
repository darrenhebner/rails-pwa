var CACHE_VERSION = 'v1';
var CACHE_NAME = CACHE_VERSION + ':sw-cache-';

function onInstall(event) {
  console.log('[Serviceworker]', 'Installing!', event);
  event.waitUntil(
    caches.open(CACHE_NAME).then(function prefill(cache) {
      return cache.addAll([
        '<%= asset_path "application.js" %>',
        '<%= asset_path "application.css" %>',
        '/shell_start',
        '/shell_end',
        '/offline.html',
        '/?include=true'
      ]);
    })
  );
}

function onActivate(event) {
  console.log('[Serviceworker]', 'Activating!', event);
  event.waitUntil(
    caches.keys().then(function(cacheNames) {
      return Promise.all(
        cacheNames
          .filter(function(cacheName) {
            return cacheName.indexOf(CACHE_VERSION) !== 0;
          })
          .map(function(cacheName) {
            return caches.delete(cacheName);
          })
      );
    })
  );
}

function buildResponse(event, url) {
  const includeUrl = new URL(url);
  includeUrl.searchParams.append('include', true);

  function middleChunk() {
    return caches.open(CACHE_NAME).then(function(cache) {
      return cache.match(event.request).then(function(response) {
        return (
          response ||
          fetch(event.request).then(function(response) {
            cache.put(event.request, response.clone());
            return response;
          })
        );
      });
    });
  }

  const parts = [
    caches.match('/shell_start'),
    middleChunk(),
    caches.match('/shell_end')
  ];

  const identity = new IdentityStream();

  event.waitUntil(
    (async function() {
      for (const responsePromise of parts) {
        const response = await responsePromise;
        await response.body.pipeTo(identity.writable, {preventClose: true});
      }
      identity.writable.getWriter().close();
    })()
  );

  return new Response(identity.readable, {
    headers: {'Content-Type': 'text/html; charset=utf-8'}
  });
}

function onFetch(event) {
  const url = new URL(event.request.url);

  event.respondWith(
    new Promise(async resolve => {
      if (
        url.origin == location.origin &&
        (url.pathname.includes('posts') || url.pathname === '/')
      ) {
        return resolve(buildResponse(event, url));
      }

      const cachedResponse = await caches.match(event.request);
      if (cachedResponse) {
        return resolve(cachedResponse);
      }

      try {
        return resolve(fetch(event.request));
      } catch (err) {
        return resolve(await caches.match('/offline.html'));
      }
    })
  );
}

self.addEventListener('install', onInstall);
self.addEventListener('activate', onActivate);
self.addEventListener('fetch', onFetch);

class IdentityStream {
  constructor() {
    let readableController;
    let writableController;

    this.readable = new ReadableStream({
      start(controller) {
        readableController = controller;
      },
      cancel(reason) {
        writableController.error(reason);
      }
    });

    this.writable = new WritableStream({
      start(controller) {
        writableController = controller;
      },
      write(chunk) {
        readableController.enqueue(chunk);
      },
      close() {
        readableController.close();
      },
      abort(reason) {
        readableController.error(reason);
      }
    });
  }
}
